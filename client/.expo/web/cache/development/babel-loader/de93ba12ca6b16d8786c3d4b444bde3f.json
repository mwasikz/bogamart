{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useOnPreventRemove, { shouldPreventRemove } from \"./useOnPreventRemove\";\nexport default function useOnAction(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      key = _ref.key,\n      actionListeners = _ref.actionListeners,\n      beforeRemoveListeners = _ref.beforeRemoveListeners,\n      routerConfigOptions = _ref.routerConfigOptions,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onActionParent = _React$useContext.onAction,\n      onRouteFocusParent = _React$useContext.onRouteFocus,\n      addListenerParent = _React$useContext.addListener,\n      onDispatchAction = _React$useContext.onDispatchAction;\n\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          var isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n\n          if (isPrevented) {\n            return true;\n          }\n\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          var shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    for (var i = actionListeners.length - 1; i >= 0; i--) {\n      var listener = actionListeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState: getState,\n    emitter: emitter,\n    beforeRemoveListeners: beforeRemoveListeners\n  });\n  React.useEffect(function () {\n    return addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction);\n  }, [addListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"mappings":"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","names":["React","NavigationBuilderContext","useOnPreventRemove","shouldPreventRemove","useOnAction","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","useContext","onActionParent","onAction","onRouteFocusParent","onRouteFocus","addListenerParent","addListener","onDispatchAction","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener"],"sources":["useOnAction.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef =\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(\n    () => addListenerParent?.('action', onAction),\n    [addListenerParent, onAction]\n  );\n\n  return onAction;\n}\n"]},"metadata":{},"sourceType":"module"}