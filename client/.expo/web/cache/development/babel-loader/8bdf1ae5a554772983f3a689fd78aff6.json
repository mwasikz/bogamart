{"ast":null,"code":"import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport LinkingContext from \"./LinkingContext\";\nimport useLinkTo from \"./useLinkTo\";\n\nvar getStateFromParams = function getStateFromParams(params) {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n\nexport default function useLinkProps(_ref) {\n  var _options$getPathFromS;\n\n  var to = _ref.to,\n      action = _ref.action;\n  var root = React.useContext(NavigationContainerRefContext);\n  var navigation = React.useContext(NavigationHelpersContext);\n\n  var _React$useContext = React.useContext(LinkingContext),\n      options = _React$useContext.options;\n\n  var linkTo = useLinkTo();\n\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n\n    var shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  var getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : getPathFromState;\n  var href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      params: to.params,\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href: href,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"mappings":"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","names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","root","useContext","navigation","options","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","_e$currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"sources":["useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}