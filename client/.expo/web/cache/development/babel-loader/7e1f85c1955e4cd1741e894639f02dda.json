{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport StaticContainer from \"./StaticContainer\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nexport default function SceneView(_ref) {\n  var screen = _ref.screen,\n      route = _ref.route,\n      navigation = _ref.navigation,\n      routeState = _ref.routeState,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      options = _ref.options,\n      clearOptions = _ref.clearOptions;\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n\n  var _useOptionsGetters = useOptionsGetters({\n    key: route.key,\n    options: options,\n    navigation: navigation\n  }),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter;\n\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var isInitialRef = React.useRef(true);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n  });\n  React.useEffect(function () {\n    return clearOptions;\n  }, []);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, React.createElement(StaticContainer, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)));\n}","map":{"version":3,"mappings":"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","names":["React","EnsureSingleNavigator","NavigationStateContext","StaticContainer","useOptionsGetters","SceneView","screen","route","navigation","routeState","getState","setState","options","clearOptions","navigatorKeyRef","useRef","getKey","useCallback","current","key","addOptionsGetter","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","Provider","value","name","render","children"],"sources":["SceneView.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions\n  >;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}