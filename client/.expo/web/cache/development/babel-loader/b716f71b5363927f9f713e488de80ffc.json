{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"visible\", \"children\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nvar FAR_FAR_AWAY = 30000;\nexport default function ResourceSavingScene(_ref) {\n  var visible = _ref.visible,\n      children = _ref.children,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (Platform.OS === 'web') {\n    return React.createElement(View, _extends({\n      hidden: !visible,\n      style: [{\n        display: visible ? 'flex' : 'none'\n      }, styles.container, style],\n      pointerEvents: visible ? 'auto' : 'none'\n    }, rest), children);\n  }\n\n  return React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: visible ? 'auto' : 'none'\n  }, React.createElement(View, {\n    collapsable: false,\n    removeClippedSubviews: Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true,\n    pointerEvents: visible ? 'auto' : 'none',\n    style: visible ? styles.attached : styles.detached\n  }, children));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AASA,IAAMC,YAAY,GAAG,KAArB;AAEA,eAAe,SAASC,mBAAT,OAKL;EAAA,IAJRC,OAIQ,QAJRA,OAIQ;EAAA,IAHRC,QAGQ,QAHRA,QAGQ;EAAA,IAFRC,KAEQ,QAFRA,KAEQ;EAAA,IADLC,IACK;;EACR,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;IACzB,OACEP,oBAACS,IAAD;MAEEC,MAAM,EAAE,CAACP,OAFX;MAGEE,KAAK,EAAE,CACL;QAAEM,OAAO,EAAER,OAAO,GAAG,MAAH,GAAY;MAA9B,CADK,EAELS,MAAM,CAACC,SAFF,EAGLR,KAHK,CAHT;MAQES,aAAa,EAAEX,OAAO,GAAG,MAAH,GAAY;IARpC,GASMG,IATN,GAWGF,QAXH,CADF;EAeD;;EAED,OACEJ,oBAACS,IAAD;IACEJ,KAAK,EAAE,CAACO,MAAM,CAACC,SAAR,EAAmBR,KAAnB,CADT;IAGES,aAAa,EAAEX,OAAO,GAAG,MAAH,GAAY;EAHpC,GAKEH,oBAACS,IAAD;IACEM,WAAW,EAAE,KADf;IAEEC,qBAAqB,EAGnBT,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IAAyBA,QAAQ,CAACC,EAATD,KAAgB,OAAzCA,GAAmD,CAACJ,OAApDI,GAA8D,IALlE;IAOEO,aAAa,EAAEX,OAAO,GAAG,MAAH,GAAY,MAPpC;IAQEE,KAAK,EAAEF,OAAO,GAAGS,MAAM,CAACK,QAAV,GAAqBL,MAAM,CAACM;EAR5C,GAUGd,QAVH,CALF,CADF;AAoBD;AAED,IAAMQ,MAAM,GAAGO,UAAU,CAACC,MAAXD,CAAkB;EAC/BN,SAAS,EAAE;IACTQ,IAAI,EAAE,CADG;IAETC,QAAQ,EAAE;EAFD,CADoB;EAK/BL,QAAQ,EAAE;IACRI,IAAI,EAAE;EADE,CALqB;EAQ/BH,QAAQ,EAAE;IACRG,IAAI,EAAE,CADE;IAERE,GAAG,EAAEtB;EAFG;AARqB,CAAlBkB,CAAf","names":["React","FAR_FAR_AWAY","ResourceSavingScene","visible","children","style","rest","Platform","OS","View","hidden","display","styles","container","pointerEvents","collapsable","removeClippedSubviews","attached","detached","StyleSheet","create","flex","overflow","top"],"sources":["ResourceSavingView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  visible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!visible}\n        style={[\n          { display: visible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={visible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS & macOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' || Platform.OS === 'macos' ? !visible : true\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n        style={visible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}