"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = void 0;
const node_fs_1 = require("node:fs");
const selector_1 = require("../shared/selector");
const to_react_native_1 = require("./to-react-native");
const serialize_styles_1 = require("../utils/serialize-styles");
const atRuleSymbol = Symbol("media");
const plugin = ({ done, output, platform, important, } = {}) => {
    const styles = {};
    const errors = [];
    return {
        postcssPlugin: "tailwindcss-react-native-style-extractor",
        OnceExit: (root) => {
            root.walk((node) => {
                var _a, _b, _c, _d;
                if (node.type === "atrule") {
                    (_a = node[atRuleSymbol]) !== null && _a !== void 0 ? _a : (node[atRuleSymbol] = ((_b = node === null || node === void 0 ? void 0 : node.parent) === null || _b === void 0 ? void 0 : _b[atRuleSymbol])
                        ? [...node.parent[atRuleSymbol]]
                        : []);
                    node[atRuleSymbol].push([node.name, node.params]);
                }
                else if (node.type === "rule") {
                    let declarations = {};
                    // Get all the declarations
                    node.walkDecls((decl) => {
                        declarations = {
                            ...declarations,
                            ...(0, to_react_native_1.toReactNative)(decl, {
                                onError: (error) => errors.push(error),
                            }),
                        };
                    });
                    if (Object.keys(declarations).length === 0) {
                        return;
                    }
                    for (const s of node.selectors) {
                        const selector = (0, selector_1.normalizeSelector)(s, { important });
                        (_c = styles[selector]) !== null && _c !== void 0 ? _c : (styles[selector] = []);
                        if ((_d = node.parent) === null || _d === void 0 ? void 0 : _d[atRuleSymbol]) {
                            styles[selector].push({
                                atRules: node.parent[atRuleSymbol],
                                ...declarations,
                            });
                        }
                        else {
                            styles[selector].push(declarations);
                        }
                    }
                }
            });
            /*
             * Why not serialize styles here?
             * Because this is used by the tests and its cleaner to write tests
             * for the non-serialized version (the at rules are next to the declarations)
             *
             * If please create an issue if you want a done function
             * that serializes the styles
             */
            if (done)
                done({ styles, errors });
            if (output) {
                const serialized = (0, serialize_styles_1.serializeStyles)(styles);
                (0, node_fs_1.writeFileSync)(output, `// This file was generated by tailwindcss-react-native. Do not edit!
const { StyleSheet } = require("react-native")
module.exports = { ${platform ? `\nplatform: '${platform},` : ""}
  styles: ${JSON.stringify(serialized.styles).replace(new RegExp('"hairlineWidth"', "g"), "StyleSheet.hairlineWidth")},
  media: ${JSON.stringify(serialized.media)},
}`);
            }
        },
    };
};
exports.plugin = plugin;
exports.plugin.postcss = true;
exports.default = exports.plugin;
