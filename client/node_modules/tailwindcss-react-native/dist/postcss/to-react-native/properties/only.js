"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.only = exports.noop = void 0;
const css_to_react_native_1 = require("css-to-react-native");
// eslint-disable-next-line unicorn/consistent-function-scoping
function noop() {
    // eslint-disable-next-line unicorn/consistent-function-scoping
    const callback = (value, name) => {
        return (0, css_to_react_native_1.getStylesForProperty)(name, value);
    };
    callback.prop = "";
    return callback;
}
exports.noop = noop;
function only(options) {
    const { values = [], units, number, color, } = Array.isArray(options) ? { values: options } : options;
    const callback = (value, name) => {
        var _a, _b;
        const isNaN = Number.isNaN(Number.parseInt(value));
        if (number) {
            if (value === "hairlineWidth") {
                return JSON.parse(JSON.stringify((0, css_to_react_native_1.getStylesForProperty)(name, "1px")).replace(new RegExp("1", "g"), (_b = (_a = globalThis.hairlineWidthValue) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '"hairlineWidth"'));
            }
            if (isNaN) {
                throw new Error(name);
            }
            return (0, css_to_react_native_1.getStylesForProperty)(name, value);
        }
        if ((color &&
            (value.startsWith("#") ||
                value.startsWith("rgb(") ||
                value.startsWith("rgba(") ||
                value.startsWith("hsl("))) ||
            value === "transparent") {
            return (0, css_to_react_native_1.getStylesForProperty)(name, value);
        }
        if (!isNaN && (units === null || units === void 0 ? void 0 : units.some((unit) => value.endsWith(unit)))) {
            return (0, css_to_react_native_1.getStylesForProperty)(name, value);
        }
        if (values.includes(value)) {
            return (0, css_to_react_native_1.getStylesForProperty)(name, value);
        }
        throw new Error(name);
    };
    return callback;
}
exports.only = only;
