"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTailwindConfig = void 0;
const node_fs_1 = require("node:fs");
const resolveConfig_1 = __importDefault(require("tailwindcss/resolveConfig"));
const native_1 = require("../../tailwind/native");
function getTailwindConfig(fullConfigPath, options) {
    var _a;
    const { tailwindConfigPath } = options;
    let userConfig = {};
    if ((0, node_fs_1.existsSync)(fullConfigPath)) {
        // eslint-disable-next-line unicorn/prefer-module
        userConfig = require(fullConfigPath);
    }
    else if (tailwindConfigPath) {
        // Throw an error if configPath was set but we were unable to find it
        throw new Error(`Unable to find config ${fullConfigPath}`);
    }
    const mergedConfig = {
        ...userConfig,
        plugins: [(0, native_1.nativePlugin)(options), ...((_a = userConfig.plugins) !== null && _a !== void 0 ? _a : [])],
    };
    return (0, resolveConfig_1.default)(mergedConfig);
}
exports.getTailwindConfig = getTailwindConfig;
