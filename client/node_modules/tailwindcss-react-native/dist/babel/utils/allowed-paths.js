"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAllowedProgramPath = exports.getAllowedOptions = void 0;
const micromatch_1 = __importDefault(require("micromatch"));
const node_path_1 = require("node:path");
const defaultContent = {
    files: ["*"],
    extract: undefined,
    transform: undefined,
};
function getAllowedOptions({ content = defaultContent }, { allowModuleTransform = "*" }) {
    const contentPaths = Array.isArray(content) ? content : content.files;
    return {
        allowModuleTransform: Array.isArray(allowModuleTransform)
            ? ["react-native", "react-native-web", ...allowModuleTransform]
            : allowModuleTransform,
        allowRelativeModules: contentPaths.length === 0 ? "*" : contentPaths,
    };
}
exports.getAllowedOptions = getAllowedOptions;
function isAllowedProgramPath({ path, allowRelativeModules, cwd, }) {
    if (allowRelativeModules === "*") {
        return true;
    }
    /**
     * This is my naive way to get path matching working on Windows.
     * Basically I turn it into a posix path which seems to work fine
     *
     * If you are a windows user and understand micromatch, can you please send a PR
     * to do this the proper way
     */
    const posixPath = path.split(node_path_1.sep).join(node_path_1.posix.sep);
    return allowRelativeModules.some((modulePath) => {
        return micromatch_1.default.isMatch(posixPath, (0, node_path_1.resolve)(cwd, modulePath).split(node_path_1.sep).join(node_path_1.posix.sep));
    });
}
exports.isAllowedProgramPath = isAllowedProgramPath;
