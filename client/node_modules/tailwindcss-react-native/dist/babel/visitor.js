"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitor = void 0;
const get_jsx_element_name_1 = require("./utils/get-jsx-element-name");
const has_named_import_1 = require("./utils/has-named-import");
const get_import_blocked_components_1 = require("./utils/get-import-blocked-components");
const has_attribute_1 = require("./utils/has-attribute");
const to_component_1 = require("./transforms/to-component");
/**
 * Visitor that detects what
 * - components should be transformed
 * - what imports exist
 */
exports.visitor = {
    ImportDeclaration(path, state) {
        for (const component of (0, get_import_blocked_components_1.getImportBlockedComponents)(path, state)) {
            state.blockList.add(component);
        }
        state.hasStyleSheetImport || (state.hasStyleSheetImport = (0, has_named_import_1.hasNamedImport)(path, "RNStyleSheet", "react-native"));
        state.hasStyledComponentImport || (state.hasStyledComponentImport = (0, has_named_import_1.hasNamedImport)(path, "StyledComponent", "tailwindcss-react-native"));
    },
    JSXElement(path, state) {
        const { blockList, canTransform } = state;
        const name = (0, get_jsx_element_name_1.getJSXElementName)(path.node.openingElement);
        state.hasProvider || (state.hasProvider = name === "TailwindProvider");
        if (blockList.has(name) || name[0] !== name[0].toUpperCase()) {
            return;
        }
        if ((0, has_attribute_1.someAttributes)(path, ["className", "tw"]) && canTransform) {
            (0, to_component_1.toStyledComponent)(path);
        }
    },
};
