import { StyleProp } from "react-native";
import { AtRuleRecord } from "./types/common";
import { UseTailwindCallback } from "./use-tailwind";
export declare const ChildClassNameSymbol: unique symbol;
export interface WithStyledPropsOptions<S, T extends string> {
    classes: string | undefined;
    styleProp: StyleProp<S>;
    propsToTransform?: T[];
    componentProps: Record<string, unknown>;
    tw: UseTailwindCallback<S>;
    spreadProps?: T[];
    classProps?: T[];
    preview: boolean;
}
export declare type WithStyledProps<S, T extends string> = Record<T, unknown> & {
    childStyles?: AtRuleRecord[];
    style: StyleProp<S>;
};
export declare function withStyledProps<S, T extends string>({ tw, classes, propsToTransform, styleProp, componentProps, spreadProps, classProps, preview, }: WithStyledPropsOptions<S, T>): WithStyledProps<S, T>;
