import { ComponentType, RefAttributes, ClassAttributes, ForwardRefExoticComponent, PropsWithoutRef } from "react";
import { StyledProps, StyledPropsWithKeys } from "./utils/styled";
export interface StyledOptions<P> {
    props?: Array<keyof P & string>;
    spreadProps?: Array<keyof P & string>;
    classProps?: Array<keyof P & string>;
    baseClassName?: string;
}
declare type ForwardRef<T, P> = ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;
declare type InferRef<T> = T extends RefAttributes<infer R> | ClassAttributes<infer R> ? R : unknown;
/**
 * Default
 */
export declare function styled<T>(Component: ComponentType<T>): ForwardRef<InferRef<T>, StyledProps<T>>;
/**
 * Base className
 */
export declare function styled<T>(Component: ComponentType<T>, baseClassName: string): ForwardRef<InferRef<T>, StyledProps<T>>;
/**
 * Base className w/ options
 */
export declare function styled<T, K extends keyof T & string>(Component: ComponentType<T>, baseClassName: string, options: StyledOptions<T> & {
    props?: Array<K>;
    spreadProps?: Array<K>;
    classProps?: Array<K>;
}): ForwardRef<InferRef<T>, StyledPropsWithKeys<T, K>>;
/**
 * Only options
 */
export declare function styled<T, K extends keyof T & string>(Component: ComponentType<T>, options: StyledOptions<T> & {
    props?: Array<K>;
    spreadProps?: Array<K>;
    classProps?: Array<K>;
}): ForwardRef<InferRef<T>, StyledPropsWithKeys<T, K>>;
export {};
