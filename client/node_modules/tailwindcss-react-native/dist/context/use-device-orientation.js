"use strict";
/**
 * ISC License (ISC)
 *
 * Copyright (c) 2018 - 2020 React Native Community
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDeviceOrientation = void 0;
/*
 * Source: https://github.com/react-native-community/hooks/blob/34548fb56e30cb115e9dfbf516663eaa862a50ea/src/useDeviceOrientation.ts
 */
const react_1 = require("react");
const react_native_1 = require("react-native");
const isOrientationPortrait = ({ width, height }) => height >= width;
const isOrientationLandscape = ({ width, height }) => width >= height;
function useDeviceOrientation() {
    const [orientation, setOrientation] = (0, react_1.useState)(() => {
        const screen = react_native_1.Dimensions.get("screen");
        return {
            portrait: isOrientationPortrait(screen),
            landscape: isOrientationLandscape(screen),
        };
    });
    (0, react_1.useEffect)(() => {
        const onChange = ({ screen }) => {
            setOrientation({
                portrait: isOrientationPortrait(screen),
                landscape: isOrientationLandscape(screen),
            });
        };
        const subscription = react_native_1.Dimensions.addEventListener("change", onChange);
        return () => {
            if (typeof (subscription === null || subscription === void 0 ? void 0 : subscription.remove) === "function") {
                subscription.remove();
            }
            else {
                // React Native < 0.65
                react_native_1.Dimensions.removeEventListener("change", onChange);
            }
        };
    }, []);
    return orientation;
}
exports.useDeviceOrientation = useDeviceOrientation;
